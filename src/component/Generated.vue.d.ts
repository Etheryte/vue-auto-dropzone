import Vue from 'vue';
import { DropzoneInstance } from './interfaces';
declare type UntypedKeys = Exclude<keyof GeneratedBase, keyof DropzoneInstance>;
declare type UntypedFields = Record<UntypedKeys, any>;
export default class GeneratedBase extends Vue {
    instance: DropzoneInstance & UntypedFields;
    Emitter: GeneratedBase;
    URL: GeneratedBase;
    accept: GeneratedBase;
    addFile: GeneratedBase;
    cancelUpload: GeneratedBase;
    createThumbnail: GeneratedBase;
    createThumbnailFromUrl: GeneratedBase;
    destroy: GeneratedBase;
    disable: GeneratedBase;
    drop: GeneratedBase;
    emit: GeneratedBase;
    enable: GeneratedBase;
    enqueueFile: GeneratedBase;
    enqueueFiles: GeneratedBase;
    filesize: GeneratedBase;
    getAcceptedFiles: GeneratedBase;
    getActiveFiles: GeneratedBase;
    getAddedFiles: GeneratedBase;
    getExistingFallback: GeneratedBase;
    getFallbackForm: GeneratedBase;
    getFilesWithStatus: GeneratedBase;
    getQueuedFiles: GeneratedBase;
    getRejectedFiles: GeneratedBase;
    getUploadingFiles: GeneratedBase;
    handleFiles: GeneratedBase;
    init: GeneratedBase;
    off: GeneratedBase;
    on: GeneratedBase;
    paste: GeneratedBase;
    processFile: GeneratedBase;
    processFiles: GeneratedBase;
    processQueue: GeneratedBase;
    removeAllFiles: GeneratedBase;
    removeEventListeners: GeneratedBase;
    removeFile: GeneratedBase;
    resizeImage: GeneratedBase;
    resolveOption: GeneratedBase;
    setupEventListeners: GeneratedBase;
    submitRequest: GeneratedBase;
    updateTotalUploadProgress: GeneratedBase;
    uploadFile: GeneratedBase;
    uploadFiles: GeneratedBase;
    readonly clickableElements: any;
    readonly defaultOptions: import("dropzone").DropzoneOptions;
    readonly element: any;
    readonly events: string[];
    readonly files: import("dropzone").DropzoneFile[];
    readonly hiddenFileInput: any;
    readonly listeners: any;
    readonly previewsContainer: any;
    readonly version: any;
}
export {};
