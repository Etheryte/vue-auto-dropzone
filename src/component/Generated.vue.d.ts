import Vue from 'vue';
import { DropzoneInstance } from './interfaces';
interface TypeHints {
    element: object;
    version: string;
    clickableElements: any[];
    listeners: any[];
    files: any[];
    previewsContainer: object;
    hiddenFileInput: object;
    URL: Function;
    getAcceptedFiles: Function;
    getRejectedFiles: Function;
    getFilesWithStatus: Function;
    getQueuedFiles: Function;
    getUploadingFiles: Function;
    getAddedFiles: Function;
    getActiveFiles: Function;
    init: Function;
    destroy: Function;
    updateTotalUploadProgress: Function;
    getFallbackForm: Function;
    getExistingFallback: Function;
    setupEventListeners: Function;
    removeEventListeners: Function;
    disable: Function;
    enable: Function;
    filesize: Function;
    drop: Function;
    paste: Function;
    handleFiles: Function;
    accept: Function;
    addFile: Function;
    enqueueFiles: Function;
    enqueueFile: Function;
    removeFile: Function;
    removeAllFiles: Function;
    resizeImage: Function;
    createThumbnail: Function;
    createThumbnailFromUrl: Function;
    processQueue: Function;
    processFile: Function;
    processFiles: Function;
    cancelUpload: Function;
    resolveOption: Function;
    uploadFile: Function;
    uploadFiles: Function;
    submitRequest: Function;
    Emitter: Function;
    events: any[];
    defaultOptions: object;
    on: Function;
    emit: Function;
    off: Function;
}
declare type UntypedKeys = Exclude<keyof TypeHints, keyof DropzoneInstance>;
declare type UntypedFields = Pick<TypeHints, UntypedKeys>;
export default class Dropzone extends Vue {
    instance: DropzoneInstance & UntypedFields;
    Emitter: Dropzone;
    URL: Dropzone;
    accept: Dropzone;
    addFile: Dropzone;
    cancelUpload: Dropzone;
    createThumbnail: Dropzone;
    createThumbnailFromUrl: Dropzone;
    destroy: Dropzone;
    disable: Dropzone;
    drop: Dropzone;
    emit: Dropzone;
    enable: Dropzone;
    enqueueFile: Dropzone;
    enqueueFiles: Dropzone;
    filesize: Dropzone;
    getAcceptedFiles: Dropzone;
    getActiveFiles: Dropzone;
    getAddedFiles: Dropzone;
    getExistingFallback: Dropzone;
    getFallbackForm: Dropzone;
    getFilesWithStatus: Dropzone;
    getQueuedFiles: Dropzone;
    getRejectedFiles: Dropzone;
    getUploadingFiles: Dropzone;
    handleFiles: Dropzone;
    init: Dropzone;
    off: Dropzone;
    on: Dropzone;
    paste: Dropzone;
    processFile: Dropzone;
    processFiles: Dropzone;
    processQueue: Dropzone;
    removeAllFiles: Dropzone;
    removeEventListeners: Dropzone;
    removeFile: Dropzone;
    resizeImage: Dropzone;
    resolveOption: Dropzone;
    setupEventListeners: Dropzone;
    submitRequest: Dropzone;
    updateTotalUploadProgress: Dropzone;
    uploadFile: Dropzone;
    uploadFiles: Dropzone;
    readonly clickableElements: any[];
    readonly defaultOptions: import("dropzone").DropzoneOptions;
    readonly element: object;
    readonly events: string[];
    readonly files: import("dropzone").DropzoneFile[];
    readonly hiddenFileInput: object;
    readonly listeners: any[];
    readonly previewsContainer: object;
    readonly version: string;
}
export {};
