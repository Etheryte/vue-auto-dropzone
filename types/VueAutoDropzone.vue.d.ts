import { Vue } from 'vue-property-decorator';
import Dropzone, { DropzoneOptions } from 'dropzone';
export interface IDropzoneOptions extends DropzoneOptions {
    url: string;
}
export interface IDropzoneInstance extends Dropzone {
    options: IDropzoneOptions;
    events: string[];
}
interface TypeHints {
    Emitter: Function;
    URL: Function;
    accept: Function;
    addFile: Function;
    cancelUpload: Function;
    clickableElements: any[];
    createThumbnail: Function;
    createThumbnailFromUrl: Function;
    defaultOptions: object;
    destroy: Function;
    disable: Function;
    drop: Function;
    element: object;
    emit: Function;
    enable: Function;
    enqueueFile: Function;
    enqueueFiles: Function;
    events: any[];
    files: any[];
    filesize: Function;
    getAcceptedFiles: Function;
    getActiveFiles: Function;
    getAddedFiles: Function;
    getExistingFallback: Function;
    getFallbackForm: Function;
    getFilesWithStatus: Function;
    getQueuedFiles: Function;
    getRejectedFiles: Function;
    getUploadingFiles: Function;
    handleFiles: Function;
    hiddenFileInput: object;
    init: Function;
    listeners: any[];
    off: Function;
    on: Function;
    paste: Function;
    previewsContainer: object;
    processFile: Function;
    processFiles: Function;
    processQueue: Function;
    removeAllFiles: Function;
    removeEventListeners: Function;
    removeFile: Function;
    resizeImage: Function;
    resolveOption: Function;
    setupEventListeners: Function;
    submitRequest: Function;
    updateTotalUploadProgress: Function;
    uploadFile: Function;
    uploadFiles: Function;
    version: string;
}
declare type UntypedKeys = Exclude<keyof TypeHints, keyof IDropzoneInstance>;
declare type UntypedFields = Pick<TypeHints, UntypedKeys>;
declare type CombinedInstance = IDropzoneInstance & UntypedFields;
export default class VueAutoDropzone extends Vue {
    instance: CombinedInstance;
    options: IDropzoneOptions;
    includeStyling: Boolean;
    destroyDropzone: Boolean;
    private hasBeenMounted;
    mounted(): void;
    beforeDestroy(): void;
    getOptions(): IDropzoneOptions;
    setOptions(value: Partial<IDropzoneOptions>): void;
    getOption(key: keyof IDropzoneOptions): string | number | boolean | {} | HTMLElement | (string | HTMLElement)[] | ((name: string) => string) | Dropzone.DropzoneDictFileSizeUnits | ((file: Dropzone.DropzoneFile, done: (error?: string | Error | undefined) => void) => void) | ((file: Dropzone.DropzoneFile, done: (error?: string | Error | undefined) => void) => void) | ((this: Dropzone) => void) | (() => void) | ((file: Dropzone.DropzoneFile, width?: number | undefined, height?: number | undefined, resizeMethod?: string | undefined) => Dropzone.DropzoneResizeInfo) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | ((e: DragEvent) => void) | (() => void) | ((file: Dropzone.DropzoneFile) => void) | ((files: Dropzone.DropzoneFile[]) => void) | ((file: Dropzone.DropzoneFile) => void) | ((file: Dropzone.DropzoneFile, dataUrl: string) => void) | ((file: Dropzone.DropzoneFile, message: string | Error, xhr: XMLHttpRequest) => void) | ((files: Dropzone.DropzoneFile[], message: string | Error, xhr: XMLHttpRequest) => void) | ((file: Dropzone.DropzoneFile) => void) | ((files: Dropzone.DropzoneFile[]) => void) | ((file: Dropzone.DropzoneFile, progress: number, bytesSent: number) => void) | ((totalProgress: number, totalBytes: number, totalBytesSent: number) => void) | ((file: Dropzone.DropzoneFile, xhr: XMLHttpRequest, formData: FormData) => void) | ((files: Dropzone.DropzoneFile[], xhr: XMLHttpRequest, formData: FormData) => void) | ((file: Dropzone.DropzoneFile, response: string | Object) => void) | ((files: Dropzone.DropzoneFile[], responseText: string) => void) | ((file: Dropzone.DropzoneFile) => void) | ((file: Dropzone.DropzoneFile[]) => void) | ((file: Dropzone.DropzoneFile) => void) | ((file: Dropzone.DropzoneFile[]) => void) | ((file: Dropzone.DropzoneFile) => void) | ((files: Dropzone.DropzoneFile[]) => void) | (() => void) | ((file: Dropzone.DropzoneFile, done: (file: string | Blob) => void) => void) | undefined;
    setOption(key: keyof IDropzoneOptions, value: any): void;
    Emitter: CombinedInstance['Emitter'];
    URL: CombinedInstance['URL'];
    accept: CombinedInstance['accept'];
    addFile: CombinedInstance['addFile'];
    cancelUpload: CombinedInstance['cancelUpload'];
    createThumbnail: CombinedInstance['createThumbnail'];
    createThumbnailFromUrl: CombinedInstance['createThumbnailFromUrl'];
    destroy: CombinedInstance['destroy'];
    disable: CombinedInstance['disable'];
    drop: CombinedInstance['drop'];
    emit: CombinedInstance['emit'];
    enable: CombinedInstance['enable'];
    enqueueFile: CombinedInstance['enqueueFile'];
    enqueueFiles: CombinedInstance['enqueueFiles'];
    filesize: CombinedInstance['filesize'];
    getAcceptedFiles: CombinedInstance['getAcceptedFiles'];
    getActiveFiles: CombinedInstance['getActiveFiles'];
    getAddedFiles: CombinedInstance['getAddedFiles'];
    getExistingFallback: CombinedInstance['getExistingFallback'];
    getFallbackForm: CombinedInstance['getFallbackForm'];
    getFilesWithStatus: CombinedInstance['getFilesWithStatus'];
    getQueuedFiles: CombinedInstance['getQueuedFiles'];
    getRejectedFiles: CombinedInstance['getRejectedFiles'];
    getUploadingFiles: CombinedInstance['getUploadingFiles'];
    handleFiles: CombinedInstance['handleFiles'];
    init: CombinedInstance['init'];
    off: CombinedInstance['off'];
    on: CombinedInstance['on'];
    paste: CombinedInstance['paste'];
    processFile: CombinedInstance['processFile'];
    processFiles: CombinedInstance['processFiles'];
    processQueue: CombinedInstance['processQueue'];
    removeAllFiles: CombinedInstance['removeAllFiles'];
    removeEventListeners: CombinedInstance['removeEventListeners'];
    removeFile: CombinedInstance['removeFile'];
    resizeImage: CombinedInstance['resizeImage'];
    resolveOption: CombinedInstance['resolveOption'];
    setupEventListeners: CombinedInstance['setupEventListeners'];
    submitRequest: CombinedInstance['submitRequest'];
    updateTotalUploadProgress: CombinedInstance['updateTotalUploadProgress'];
    uploadFile: CombinedInstance['uploadFile'];
    uploadFiles: CombinedInstance['uploadFiles'];
    readonly clickableElements: any[];
    readonly defaultOptions: Dropzone.DropzoneOptions;
    readonly element: object;
    readonly events: string[];
    readonly files: Dropzone.DropzoneFile[];
    readonly hiddenFileInput: object;
    readonly listeners: any[];
    readonly previewsContainer: object;
    readonly version: string;
}
export {};
